#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
const char* ssid = "jassi5";
const char* password = "jassi1234";
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;
const char* mqttTopic = "mqtttopic/topic name";
const int qos = 0;
const char* clientId = "clientId-xyz";

WiFiClient espClient;
PubSubClient client(espClient);

char lastMessage[2] = ""; // Variable to store the last received message
bool relayState = true; // Initial state of the relay is turned on
bool localSwitchState = true; // Initial state of the local switch is turned on

const int buzzerPin = 5; // Use GPIO 5 for the buzzer (D1)
const int relayPin = 4; // Use GPIO 4 for the relay control (D2)

ESP8266WebServer server(80);

void beep() {
  digitalWrite(buzzerPin, HIGH); // Turn on the buzzer
  delay(100); // Wait for a short duration (adjust as needed)
  digitalWrite(buzzerPin, LOW); // Turn off the buzzer
}

void callback(char* topic, byte* payload, unsigned int length);

void reconnect() {
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    if (client.connect(clientId)) {
      Serial.println("Connected to MQTT");
      client.subscribe(mqttTopic, qos);

      // Clear retained message on MQTT broker
      client.publish(mqttTopic, "", true);

      // Publish initial relay state as ON
      client.publish(mqttTopic, "1", true);
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Retrying in 2 seconds...");
      delay(2000);
    }
  }
}

void handleRoot() {
  String html = "<html><body><h1>NIELIT LEDs MQTT Toggle Switch</h1>";
  html += "<p>Relay State: " + String(relayState ? "ON" : "OFF") + "</p>";
  html += "<p><a href=\"/toggle\">Toggle Relay</a></p>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

void handleToggle() {
  relayState = !relayState;
  digitalWrite(relayPin, relayState ? HIGH : LOW);
  beep();

  String statePayload = relayState ? "1" : "0";
  client.publish(mqttTopic, statePayload.c_str(), true);

  server.sendHeader("Location", String("/"), true);
  server.send(302, "text/plain", "");
}

void setup() {
  pinMode(buzzerPin, OUTPUT); // Set buzzer pin as an output

  pinMode(relayPin, OUTPUT); // Set relay pin as an output
  digitalWrite(relayPin, relayState ? HIGH : LOW); // Initialize relay state

  Serial.begin(115200);
  delay(10);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  while (!client.connected()) {
    reconnect();
  }

  MDNS.begin("jasmeen"); // Start the mDNS responder with the hostname "jasmeen"
  Serial.println("mDNS responder started");

  server.on("/", handleRoot);
  server.on("/toggle", handleToggle);

  server.begin();
}

void loop() {
  MDNS.update();
  
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  server.handleClient();
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.println("Message received: ");
  Serial.print((char*)payload);

  if (length == 1 && payload[0] != lastMessage[0]) {
    if (payload[0] == '0') {
      relayState = false; // Set relay state OFF
      beep(); // Emit a beep
    } else if (payload[0] == '1') {
      relayState = true; // Set relay state ON
      beep(); // Emit a beep
    }

    digitalWrite(relayPin, relayState ? HIGH : LOW); // Update relay state
    strncpy(lastMessage, (char*)payload, sizeof(lastMessage));
  }
}
